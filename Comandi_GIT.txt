Lezioni da http://gitreal.codeschool.com/levels/1/challenges/4

$ git config --global user.name "papero"			//Creo utenti generici, non assegnati a un repository specifico
$ git config --global user.name "pennuto"

$ git init											//Creo un repository. Non c'è un nome *-* 
$ git status										//Interrogo il repository, quali sono i file a cui bisogna prestare attenzione?
$ git add <file>									//Aggiungo i file modificati all'indice
$ git commit 										//Committo al repository locale
$ git add css										//Aggiungo la directory css (non ho avuto bisogno di jolly per aggiungere il suo contenuto)
$ git log											//Mostra la storia di tutti i commit eccetera sul repository.

Oh passiamo alla lezione 2, mo committo 'sto file gh

No, non ci vado a fare il resto del corso perché è a pagamento ._.

* ------------------------------------------------------------------------------------------------------- *

https://www.codecademy.com/courses/learn-git/lessons/git-workflow/exercises/hello-git
	git init 	creates a new Git repository
	git status 	inspects the contents of the working directory and staging area
	git add 	adds files from the working directory to the staging area
	git diff 	shows the difference between the working directory and the staging area
	git commit 	permanently stores file changes from the staging area in the repository
	git log 	shows a list of all previous commits

* ----------------
https://www.codecademy.com/en/courses/learn-git/lessons/git-backtracking/exercises/backtracking-intro?action=lesson_resume&link_content_target=interstitial_lesson
	git checkout HEAD filename						Discards changes in the working directory.
	git reset HEAD filename							Unstages file changes in the staging area.
	git reset SHA									Can be used to reset to a previous commit in your commit history.
	
	Additionally, you learned a way to add multiple files to the staging area with a single command:
	git add filename_1 filename_2 (or using jolly with quotes)

* ----------------
https://www.codecademy.com/en/courses/learn-git/lessons/git-branching/exercises/why-branch?action=lesson_resume&link_content_target=interstitial_lesson
Let's take a moment to review the main concepts and commands from the lesson before moving on.

Git branching allows users to experiment with different versions of a project by checking out separate branches to work on.

	git branch										Lists all a Git project's branches.
	git branch branch_name							Creates a new branch.
	git checkout branch_name						Used to switch from one branch to another.
	git merge branch_name							Used to join file changes from one branch to another.
	git branch -d branch_name						Deletes the branch specified.

* ----------------
https://www.codecademy.com/en/courses/learn-git/lessons/git-teamwork/exercises/remotes?action=lesson_resume&link_content_target=interstitial_lesson

The workflow for Git collaborations typically follows this order:
	Fetch and merge changes from the remote
	Create a branch to work on a new project feature
	Develop the feature on your branch and commit your work
	Fetch and merge from the remote again (in case new commits were made while you were working)
	Push your branch up to the remote for review

	Vediamo se cominciamo a lavorare seguendo un workflow decente. Tipo che da ora in avanti le modifiche le faccio dopo essermi messo in una branch specifica eppoi le uppo e da làddentro le si mergia nel master *-*

	A remote is a Git repository that lives outside your Git project folder. Remotes can live on the web, on a shared network or even in a separate folder on your local computer.
	The Git Collaborative Workflow are steps that enable smooth project development when multiple collaborators are working on the same Git project.
	We also learned the following commands
	
	git clone: Creates a local copy of a remote.
	git remote -v: Lists a Git project's remotes.
	git fetch: Fetches work from the remote into the local copy.
	git merge origin/master: Merges origin/master into your local branch.
	git push origin <branch_name>: Pushes a local branch to the origin remote.
	Git projects are usually managed on Github, a website that hosts Git projects for millions of users. With Github you can access your projects from anywhere in the world by using the basic workflow you learned here.

-.- Non faccio niente d'ora in avanti perché il corso è finito ._.